<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS IoT &amp; Alexa Workshop on Alexa &amp; IoT Workshop</title>
    <link>/</link>
    <description>Recent content in AWS IoT &amp; Alexa Workshop on Alexa &amp; IoT Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 05 Sep 2019 23:06:51 +0800</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What will you learn</title>
      <link>/introduction/what-you-will-learn.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/introduction/what-you-will-learn.html</guid>
      <description> Learning objectives  Understand the Alexa Smart Home Skill interaction model Understand account linking and why it is necessary Understand the interaction between the Alexa Cloud and the Device Cloud Deploy a Device Cloud using AWS services  </description>
    </item>
    
    <item>
      <title>What is Alexa Skills</title>
      <link>/introduction/alexa-skills.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/introduction/alexa-skills.html</guid>
      <description>Alexa provides a set of built-in capabilities, referred to as skills. For example, Alexa&amp;rsquo;s abilities include playing music from multiple providers, answering questions, providing weather forecasts, and querying Wikipedia. Check this doc for more information.
Alexa Skills Kit (also known as ASK) The Alexa Skills Kit lets you teach Alexa new skills. Alexa skills are like apps. You can enable and disable skills, in the same way that you install and uninstall apps on your smart phone or tablet.</description>
    </item>
    
    <item>
      <title>Alexa Skill Model</title>
      <link>/introduction/alexa-skill-model.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/introduction/alexa-skill-model.html</guid>
      <description>The first step in building a new skill is to decide what your skill will do. This determines how your skill integrates with the Alexa service and what you need to build. The Alexa Skills Kit supports building several different types of skills, such as Custom Interaction Model, Smart Home Skills (pre-built model), Video Skills (pre-built model), Music Skills (pre-build model) etc. You can find the up-to-date list of supported models here</description>
    </item>
    
    <item>
      <title>1. Prerequisites</title>
      <link>/getting-started/prereq.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/getting-started/prereq.html</guid>
      <description>Accounts This chapter prepares all the prerequisites for the hands-on labs.
 If you want to run this on your own:
 AWS Account. Open an AWS account You need a valid credit card to set up your account.
 Amazon developer account. Go visit Amazon Developer Portal to create an account for free.
  or; an account provided by AWS at an AWS led workshop.
 Alexa APP.</description>
    </item>
    
    <item>
      <title>2. Setup AWS Cloud9</title>
      <link>/getting-started/create-cloud9-env.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/getting-started/create-cloud9-env.html</guid>
      <description>This workshop is designed to run in the N.Virginia (us-east-1) region. Please don&amp;rsquo;t run in any other region.
 If you are running this workshop in your own account ensure to be logged in with an IAM user with Administrator privileges and not the root account user. Refer to
the documentation on how to create IAM users.
 When logging in with an IAM user you&amp;rsquo;ll have to provide an account id or account alias and then a username and password.</description>
    </item>
    
    <item>
      <title>Deploy with Console</title>
      <link>/smart-home/deploy_app/deploy_amplify_console.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/deploy_app/deploy_amplify_console.html</guid>
      <description>Click on the button below.

 This will open the AWs Amplify Console, and should look as below
 Click Connect to GitHub. You&amp;rsquo;ll need a Github account for this step. The source code repo will be forked in your account
 Click on the link Create a new service role. Just press the Next button to accept the defaults.
 Click on the refresh button when done and select the role you just created (eg _amplifyconsole-backend-role).</description>
    </item>
    
    <item>
      <title>Deploy with CLI</title>
      <link>/smart-home/deploy_app/deploy_amplify_cli.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/deploy_app/deploy_amplify_cli.html</guid>
      <description>You should ONLY run this if you would like to develop locally.
 In this application, Yarn and node.js are used to build the application.
Prerequisites  Install node.js. The easiest way to install NodeJS is NVM. Install Yarn Install AWS Amplify CLI or npm i @aws-amplify/cli -g
 Clone the Github repo on your local machine
git clone https://github.com/massi-ang/aws-alexa-workshop-ui aws-alexa-workshop-ui cd aws-alexa-workshop-ui  Run amplify init to init the backend.</description>
    </item>
    
    <item>
      <title>2. Smart Lamp</title>
      <link>/smart-home/2.smart-lamp-simulator.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/2.smart-lamp-simulator.html</guid>
      <description>In this step you&amp;rsquo;ll learn how to connect a virtual Smart Lamp to AWS IoT Core in order to be able to control it remotely. The programming model used in this simulated device is similar to what you would embed in the real thing, albeit you might use Amazon FreeRTOS and not NodeJS.
Create a Thing on AWS IoT Console For the device to be able to communicate with AWS IoT, we need to setup few things first.</description>
    </item>
    
    <item>
      <title>3. Claim the device</title>
      <link>/smart-home/3.bind-device.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/3.bind-device.html</guid>
      <description>In this step you are going to associate the virtual Smart Lamp to a customer account to create binding relationship between device and user.
 Use your Camera or Wechat Application to scan the QR Code that has been printed in the terminal window when you run the lamp simulator. NOTE: From a laptop you can click on the URL link that is shown in the terminal under the QR Code</description>
    </item>
    
    <item>
      <title>4. Create Smart Home Skill</title>
      <link>/smart-home/4.create-skill.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/4.create-skill.html</guid>
      <description>Using the Alexa Developer portal, we are going to configure the Smart Home Skill.
At the end of this step you&amp;rsquo;ll obtain the Skill Id that will be used to setup your skill logic in Lambda.
In order to successuflly run this workshop as-is you need to have an Alexa account registered in the US. If you are unsure about where your account has been registered to, we advice to create a new account.</description>
    </item>
    
    <item>
      <title>5. Setup Account Linking</title>
      <link>/smart-home/6.account-linking.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/6.account-linking.html</guid>
      <description>In this step you are going to setup Account Linking between your backend and Alexa. Account linking is required by Alexa when using Smart Home Skills in order to be able to identify the devices belonging to a given user.
When you deployed the Companion App, a Congito User Pool was created in the AWS account to store the user identities. Cognito provides a managed IdP that developers can use to manage their users identities and link them with Amazon accounts without writing one line of code.</description>
    </item>
    
    <item>
      <title>6. Create the Alexa backend</title>
      <link>/smart-home/7.create-lambda.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/7.create-lambda.html</guid>
      <description>It is now time to create the backend for your skill, ie the service that will receive the Alexa directives corresponding to the user interactions with Alexa. In order to create a robust solution without having to setup and maintain a lot of infrastructure you are going to use Lambda.
Make sure you&amp;rsquo;ve selected the N.Virginia region before you continue.
Create Lambda Execution Role  Go to IAM Console, choose Roles on the left side bar</description>
    </item>
    
    <item>
      <title>7. Discover Smart Home Devices</title>
      <link>/smart-home/8.device-discovery.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/8.device-discovery.html</guid>
      <description>There are a couple of ways to invoke Discover directive:
 ask &amp;ldquo;Alexa, discover my smart home devices&amp;rdquo; to Echo/Alexa App or AVS devices. use the mobile app  Let&amp;rsquo;s use the second:
 Open Alexa App
 Choose Devices, and then click add icon
 Choose Add Device
 Scroll to the bottom, and then choose Other
 Click Discover Devices. Wait for 20s, the discover process may take longer.</description>
    </item>
    
    <item>
      <title>8. Test Smart Home Skill</title>
      <link>/smart-home/9a.test-skill.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/smart-home/9a.test-skill.html</guid>
      <description>Now, you can try control the Smart Lamp power status using voice.
Change ON/OFF status of smart lamp Make sure your Smart Lamp Simulator is running. You will see the output from its terminal.
  Try to say Alexa, turn on &amp;lt;device-friendly-name&amp;gt; to Alexa App or Echo device.
 Try to say Alexa, turn off &amp;lt;device-friendly-name&amp;gt; to Alexa App or Echo device.
 Check your Smart Lamp Simulator output</description>
    </item>
    
    <item>
      <title>1. FreeRTOS and Amazon FreeRTOS</title>
      <link>/advanced/1.freertos-and-afr.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/advanced/1.freertos-and-afr.html</guid>
      <description>Programming MCUs When programming microcontrollers there are mainly 2 paradigms:
 the super-loop real-time operating system  Super-loop In the super-loop model, think Arduino, the program consist in an infinite loop that executes each step in a given sequence, evaluates the different branches in sequence, etc. Complex logix become easily unmanegeable in this model and it is not easy to prioritize certain operations compared to other.
RTOS An RTOS doesn&amp;rsquo;t normally provides all the features or OSes like Linux or Windows.</description>
    </item>
    
    <item>
      <title>2. Hardware kit</title>
      <link>/advanced/2.hw-kit.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/advanced/2.hw-kit.html</guid>
      <description>Assemble the kit The sample kit is composed by a ESP32-DevKitC board and a daughter board with:
 4 buttons 5 RGB NeoPixels leds addressable over I2C (WS2812) a temperature / pressure /huimdity sensor luminosity sensor BME280 a luminosity sensor BH1730FVC  Insert the ESP32 board on the daughter board making sure the USB port is on the same side of the black connector on the daughter board.</description>
    </item>
    
    <item>
      <title>3. Your first Amazon FreeRTOS project</title>
      <link>/advanced/3.install-tool-chain.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/advanced/3.install-tool-chain.html</guid>
      <description>Getting started If you want to experiment with Amazon FreeRTOS on your own you can check the documentation.
For this lab, we are going to use a pre-configured example where we already have the code needed to interact with the peripherals on the daughter board.
In this lab we are going to follow the instructions of this project https://github.com/EponaLab/afr-alexa-smarthome.
Click on the link and follow the README.
Stop at the step when you are asked to checkout the shadow-demo branch.</description>
    </item>
    
    <item>
      <title>4. Smart lamp</title>
      <link>/advanced/4.afr-lamp.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/advanced/4.afr-lamp.html</guid>
      <description>Implement the lamp You should have now a working firmware that can make the ESP32 securely connect to AWS IoT Core, but it does not work as a connected lamp yet.
You need to implement the logic that allows the interaction with the backend: listening to Device Shadow changes and report the current status of the device to the shadow.
For simplicity the code has already been provided to you.</description>
    </item>
    
    <item>
      <title>5. Enable Alexa</title>
      <link>/advanced/5.connecting.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/advanced/5.connecting.html</guid>
      <description>The firmware you have built and installed on the device is enabled to communicate with AWS IoT and the Device Shadow serice.
How it works Check the file aws_publish_sensors_mqtt.c in ~/environment/esp/afr-alexa-smarthome/demos/espressif/esp32_devkitc_esp_wrover_kit/common/application_code.
The prvDeltaCallback function is invoked every time the client receives a delta message from the Shadow Service. It then parses the message and publishes the result on an internal queue.
static BaseType_t prvDeltaCallback( void * pvUserData, const char * const pcThingName, const char * const pcDeltaDocument, uint32_t ulDocumentLength, MQTTBufferHandle_t xBuffer ) { .</description>
    </item>
    
    <item>
      <title>Conclusion &amp; Destroy AWS Resources</title>
      <link>/cleanup/destroy-resource.html</link>
      <pubDate>Thu, 05 Sep 2019 23:06:51 +0800</pubDate>
      
      <guid>/cleanup/destroy-resource.html</guid>
      <description>Congratulations! Now you have concluded this workshop about How to build a Smart home Skill.
For destroying resources, please check the below.
Destroy Device Binding UI  Go to Cognito User Pool Console
 Select the User Pool created
 Click Domain name on the left side bar
 Click Delete domain, select the checkbox and confirm to delete
 Go to AWS Amplify Console
 Select the Amplify APP</description>
    </item>
    
  </channel>
</rss>