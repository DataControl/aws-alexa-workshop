[
{
	"uri": "/",
	"title": "AWS IoT &amp; Alexa Workshop",
	"tags": [],
	"description": "",
	"content": "In this workshop, we will explore how to build Alexa Smart Home Skills using AWS Services.\n"
},
{
	"uri": "/introduction.html",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Welcome to AWS \u0026amp; Alexa Workshop!\nAlexa is Amazon’s cloud-based voice service available on tens of millions of devices from Amazon and third-party device manufacturers. With Alexa, you can build natural voice experiences that offer customers a more intuitive way to interact with the technology they use every day. Our collection of tools, APIs, reference solutions, and documentation make it easy for anyone to build with Alexa.\nThe intent of this workshop is to show users how to develop Alexa Smart Home Skills leveraging AWS services and in particular AWS IoT services to speed up the development.\n"
},
{
	"uri": "/introduction/what-you-will-learn.html",
	"title": "What will you learn",
	"tags": [],
	"description": "",
	"content": " Learning objectives  Understand the Alexa Smart Home Skill interaction model Understand account linking and why it is necessary Understand the interaction between the Alexa Cloud and the Device Cloud Deploy a Device Cloud using AWS services  "
},
{
	"uri": "/introduction/alexa-skills.html",
	"title": "What is Alexa Skills",
	"tags": [],
	"description": "",
	"content": " Alexa provides a set of built-in capabilities, referred to as skills. For example, Alexa\u0026rsquo;s abilities include playing music from multiple providers, answering questions, providing weather forecasts, and querying Wikipedia. Check this doc for more information.\nAlexa Skills Kit (also known as ASK) The Alexa Skills Kit lets you teach Alexa new skills. Alexa skills are like apps. You can enable and disable skills, in the same way that you install and uninstall apps on your smart phone or tablet. Skills are voice-driven Alexa capabilities. You can add Alexa skills to your Echo to bring products and services to life. Customers can access these new abilities by asking Alexa questions or making requests. You can build skills that provide users with many different types of abilities. For example, a skill might do any one of the following:\n Look up answers to specific questions (\u0026ldquo;Alexa, ask tide pooler for the high tide today in Seattle.\u0026rdquo;) Challenge the user with puzzles or games (\u0026ldquo;Alexa, play Harry Potter quiz.\u0026rdquo;) Control lights and other devices in the home (\u0026ldquo;Alexa, turn on the living room lights.\u0026rdquo;) Provide audio or text content for a customer\u0026rsquo;s flash briefing (\u0026ldquo;Alexa, give me my flash briefing\u0026rdquo;)  "
},
{
	"uri": "/introduction/alexa-skill-model.html",
	"title": "Alexa Skill Model",
	"tags": [],
	"description": "",
	"content": " The first step in building a new skill is to decide what your skill will do. This determines how your skill integrates with the Alexa service and what you need to build. The Alexa Skills Kit supports building several different types of skills, such as Custom Interaction Model, Smart Home Skills (pre-built model), Video Skills (pre-built model), Music Skills (pre-build model) etc. You can find the up-to-date list of supported models here\nIn this workshop we will cover the Smart Home Skills.\nSmart Home Skill This session is original from Alexa Skill Models # Smart Home Skills\n For building a skill to control smart home devices such as cameras, lights, locks, thermostats, and smart TVs, you should use the Smart Home pre-built model. This gives you less control over the user\u0026rsquo;s experience, but simplifies development since you don\u0026rsquo;t need to create the voice user interface yourself. These skills are also easier for end users to invoke, since they don\u0026rsquo;t need to remember any invocation name and can make requests such as \u0026ldquo;Alexa, turn on the living room lights.\u0026rdquo;\nFor this type of skill, the Smart Home Skill API defines:\n The requests the skill can handle. These requests are called device directives. Examples include:\n turn on / turn off increase / decrease the temperature change the dimness or brightness for a light lock a door change the channel on a television view a live video stream from a smart home camera on Echo Show or Fire TV.  The words users say to make (or invoke) those requests. For example:\n \u0026ldquo;turn off the living room lights\u0026rdquo; \u0026ldquo;increase the temperature by two degrees\u0026rdquo; \u0026ldquo;dim the living room lights to 20%\u0026rdquo; \u0026ldquo;lock the back door\u0026rdquo; \u0026ldquo;change channel to PBS\u0026rdquo; \u0026ldquo;show the front door camera\u0026rdquo;   You (as the developer) define how your skill responds to a particular directive. For instance, you write the code that makes a light turn on when your skill receives a \u0026ldquo;turn on the light\u0026rdquo; directive. This code is hosted as an AWS Lambda function. Note that a skill built with the Smart Home Skill API can respond only to the requests (device directives) supported by the API\nOther skill types For more details about other types of skills and the differences between them, see Understand the Different Skill Models.\n"
},
{
	"uri": "/getting-started/prereq.html",
	"title": "1. Prerequisites",
	"tags": [],
	"description": "",
	"content": " Accounts This chapter prepares all the prerequisites for the hands-on labs.\n If you want to run this on your own:\n AWS Account. Open an AWS account You need a valid credit card to set up your account.\n Amazon developer account. Go visit Amazon Developer Portal to create an account for free.\n  or; an account provided by AWS at an AWS led workshop.\n Alexa APP. Please download Alexa APP using App Store or Google Play.\n If you are in China:  For iPhone users, you won\u0026rsquo;t be able to find the APP if you are using Chinese App store account. Do use global accounts. For Google Play users, you will need VPN to download the APP and change country setting to anything except China and disable GPS. If the country setting and GPS location is still China, you will meet timeout error whenever you open the APP.   Optional: Register a GitHub account to be able to fork the repositories with the code\n  Region  This Workshop only supports N.Virginia(us-east-1) AWS Region。  Knowledge It is better to have the following AWS knowledge to continue the workshop. However, it is not a requirement.\n   STARS SIGNIFICANCE     0 No knowledge.   1 Just starting to explore this Service.   2 Basic knowledge of this Service. May requires assistance.   3 Comfortable describing this Service to a customer and how it integrates with multiple AWS Services.   4 Can demonstrate a deeper level of understanding in integration/arch context/coding.   5 Subject matter expert in this Service.    AWS Services  AWS Cloud9 \n AWS Lambda \n AWS Amplify Console\n Amazon Cognito User Pools. \n AWS AppSync\n Amazon DynamoDB \n  Alexa Skills  Alexa Developer Console\n Alexa Smart Home Skills\n  "
},
{
	"uri": "/getting-started.html",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": " Chapter 2 In this chapter, we will create a new workspace for this workshop using Cloud9. AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser.\nThe reason for setting up of a Cloud9 environment is to prevent dependencies conflicting with your local environment. It doesn\u0026rsquo;t mean that we have to use Cloud9 for Alexa development. You could also skip this session to use your local development environment. But to guarantee the success of this workshop, we highly recommend following these instructions.\n "
},
{
	"uri": "/getting-started/create-cloud9-env.html",
	"title": "2. Setup AWS Cloud9",
	"tags": [],
	"description": "",
	"content": " This workshop is designed to run in the N.Virginia (us-east-1) region. Please don\u0026rsquo;t run in any other region.\n If you are running this workshop in your own account ensure to be logged in with an IAM user with Administrator privileges and not the root account user. Refer to\nthe documentation on how to create IAM users.\n When logging in with an IAM user you\u0026rsquo;ll have to provide an account id or account alias and then a username and password.\nWhen logging in as root you use an email and a password.\nLaunch Cloud9  Go to AWS Cloud9 Console\n Select Create environment\n Name it alexaworkshop, and leave all the defaults\n When it comes up, customize the environment by closing the Welcome tab, lower work area, and opening a new terminal tab in the main work area:  Your workspace should now look like this:  Cloud9 manages IAM credentials dynamically so you don\u0026rsquo;t have to configure any further credentials.\n  Troubleshooting Ad blockers, javascript disablers, and tracking blockers should be disabled for the Cloud9 domain, or connecting to the workspace might be impacted. Cloud9 requires third-party-cookies. You can whitelist the specific domains.\n "
},
{
	"uri": "/smart-home.html",
	"title": "Smart Home Skills",
	"tags": [],
	"description": "",
	"content": " Chapter 3 In this lab, you will learn how to build a virtual Alexa-Enabled Smart Lamp using various AWS Services by creating:\n A virtual Alexa-Enabled Smart Home Lamp A device binding system using AppSync, Cognito User Pool, Lambda, DynamoDB An Alexa backend which handles directives from Alexa and control the power status of Lamp via IoT Core  Steps  1. Companion App   2. Smart Lamp   3. Claim the device   4. Create Smart Home Skill   5. Setup Account Linking   6. Create the Alexa backend   7. Discover Smart Home Devices   8. Test Smart Home Skill   "
},
{
	"uri": "/smart-home/deploy_app.html",
	"title": "1. Companion App",
	"tags": [],
	"description": "",
	"content": " Ensure you are using the N.Virginia region (us-east-1).\n In order to be able to control his/her own devices, a user has to claim the device to its account on your platform. This is accomplished by using a companion app, and can be, in its most minimal form, be comprised of an API that allows the user to provide some identification information of the device he just purchased, and persist this information in a DB. For this task we will use AppSync, which is a GraphQL backend and DynamoDB. Moreover, we need a way to create the user accounts and subsequetly authenticated them, for which Amazon Cognito User Pools provides an out-of-the-box managed solution. We will use AWS Amplify toolchain to build this application and deploy it. The architeture is as follow:\nArchitecture Overview The process is depicted in the seqeunce diagram below, after which the device will be associated to the user account. We are also providing a feature to \u0026ldquo;Unclaim\u0026rdquo; the device, in case we were to sell it to another user. The \u0026ldquo;Unclaim\u0026rdquo; process deletes the record from the DB.\nAssociate a device to a user In order to claim the device the userwill invoke the API and create an record in DynamoDB.\nFor a physical device, a serial number is usually being used to uniquely identify a device. In this lab the serial number is used as query parameter to the URL of the companion app and for ease-of-use from mobile devices, it has been encoded into a QR code. Customers simply need to scan the QR code to bind the devices. In the real word, the QR Code could be printed on the device.\nThe following flow chart describes a proposed design of how to bind physical device to users.  Customer scan the QR code with their mobile phone A web page being rendered on the phone\n Redirect to the login page (skip to step 6 if authenticated)\n Submit login information and get accessToken and idToken\n Get user profile using accessToken\n Invoke device binding API Create device and user relationship in database\n  The integration between AWS AppSync and Amazon DynamoDB is taken care by AWS Amplify.\nFor the curious, have a look in the AppSync console at the AlexaBackend-.. API, and in particular in the Schema and the Mutation and Query resolvers. These are written in VTL (Velocity Templates) and provide a fully serverless integration with DynamoDB.\nThis is just an example of how a device can be associated to a user account on your platform. There are other ways to achieve this same goal to know which devices a user owns in order to allow the user to control them\n How to Run You can choose either to Deploy this to Amplify console (you\u0026rsquo;ll need a GitHub account for this) or to develop via CLI. This is a modern web application, thus the easiest way for deployment is AWS Amplify Console.\n Deploy with Amplify Console Deploy from command line  "
},
{
	"uri": "/smart-home/deploy_app/deploy_amplify_console.html",
	"title": "Deploy with Console",
	"tags": [],
	"description": "",
	"content": " Click on the button below.\n\n This will open the AWs Amplify Console, and should look as below\n Click Connect to GitHub. You\u0026rsquo;ll need a Github account for this step. The source code repo will be forked in your account\n Click on the link Create a new service role. Just press the Next button to accept the defaults.\n Click on the refresh button when done and select the role you just created (eg _amplifyconsole-backend-role).\n Click Save and deploy\n  It might takes few minutes for the deployment to complete, so let\u0026rsquo;s proceed with the next step. When you will come back to the Amplify Console later, you will be see the URL for the web application. "
},
{
	"uri": "/smart-home/deploy_app/deploy_amplify_cli.html",
	"title": "Deploy with CLI",
	"tags": [],
	"description": "",
	"content": " You should ONLY run this if you would like to develop locally.\n In this application, Yarn and node.js are used to build the application.\nPrerequisites  Install node.js. The easiest way to install NodeJS is NVM. Install Yarn Install AWS Amplify CLI or npm i @aws-amplify/cli -g\n Clone the Github repo on your local machine\ngit clone https://github.com/massi-ang/aws-alexa-workshop-ui aws-alexa-workshop-ui cd aws-alexa-workshop-ui  Run amplify init to init the backend. When prompted enter dev for environment name, leave the rest as their default.\n Choose your default editor and AWS profile. Wait for the initialization finished  Run amplify push and type Yes when asked to confirm\n Click Enter button to keep the all the rest default settings  Run yarn install to install dependencies\n Run yarn start to start the web application\n Open http://localhost:3000/?thingName=xxxxxxxx to view it in the browser.\n If you are the first time to run the web application. You should click the Create account button to create an account.\n  Publishing the app If you have run the amplify commmands on Cloud9 you will not be able to access the environment from your browser without publishing the app:\n Run amplify add hosting Run amplify push Run amplify publish Open the Amplify console when done to retrieve the URL for the frontend.  "
},
{
	"uri": "/smart-home/2.smart-lamp-simulator.html",
	"title": "2. Smart Lamp",
	"tags": [],
	"description": "",
	"content": " In this step you\u0026rsquo;ll learn how to connect a virtual Smart Lamp to AWS IoT Core in order to be able to control it remotely. The programming model used in this simulated device is similar to what you would embed in the real thing, albeit you might use Amazon FreeRTOS and not NodeJS.\nCreate a Thing on AWS IoT Console For the device to be able to communicate with AWS IoT, we need to setup few things first. AWS IoT Core uses X.509 certificates to perform mutual TLS authentication and be able to identify the devices trying to connect. Once authenticated, AWS IoT Core checks the IoT Policy associated with the Certificate in order to know what the device is allowed to perform. Finally, you would typically want to keep additional metadata for your device in order to easily identify it when you need to interact with it: for this reason you\u0026rsquo;ll also create a Thing in the AWS IoT Core Registry.\nLet’s setup Thing, Certificates and AWS IoT Policies.\n Log in the AWS IoT console and make sure you are in the region communicated at the beginning of the workshop. It should like the following. The console provides a simplified flow to create a Thing which we will use\n Click on Get Started and then select the Onboard menu option.\n Click the Get Started button, and Get started again\n If you are using AWS Cloud9, select Linux as the platform; choose Node.js for IoT Device SDK. This is used to generate a full package for us to quickly connect to AWS IoT. Choose Next to continue\n Enter smart-lamp-0001 for the Name field, and click Next step  Everything has been generated for you! Click the button under Download connection kit for to download the package.  You can ignore the next screens\n  To summarize, the following contents have been created:\n A certificate to identify the device A Thing in the registry to represent the device and its additional attributed, to which the certificate is attached A security policy allow device to send and receive messages, which is attached to the certificate A zip file containing the public device certificate, the private key and a sample Hello World script you can use to test the setup  Do not lose this zip file, it contains your private key file which cannot be retrieved again. Do not need to run the scripts on the last page of the wizard, just click Done and Done again.\n In real circumstances, the private key should never leave the device and you should use a secure element to generate it. In such case the \u0026ldquo;registration\u0026rdquo; process would look a bit different. The device would already be provisioned with a certificate that has been generated during the manufacturing process, and the registration would take place JIT.\n Modify Default Policy The default security policy created by the above wizard will limit the topics your device can publish on. For the labs in this workshop we’re going to create a more open policy, to avoid trouble with misspelling or configurations, but please keep in mind that the least priviledge principle should always be applied. Check the documentation on how to write secure policies.\n If you do not see the thing you just created, click on Manage - it will default to Things\n Find the thing you just created, for example smart-lamp-0001 for this lab\n Click on your device to see it’s details\n Click on Security\n Click on the attached certificate - see below  Click on Policies  Click on your policy, it should be named smart-lamp-0001-Policy\n Click Edit Policy Document\n Copy paste the following Json document:\n{ \u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;, \u0026quot;Statement\u0026quot;: [ { \u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;, \u0026quot;Action\u0026quot;: [ \u0026quot;iot:Publish\u0026quot;, \u0026quot;iot:Subscribe\u0026quot;, \u0026quot;iot:Connect\u0026quot;, \u0026quot;iot:Receive\u0026quot; ], \u0026quot;Resource\u0026quot;: [ \u0026quot;*\u0026quot; ] } ] }  Click Save as new version   Your device can now publish and subscribe to any topics. So far, three required components to use AWS IoT have been created:\n Device certificates A security policy and being modified for the permission we need The certificate and security policy have been attached to the thing smart-lamp-0001  You might wonder which permission is iot:Receive. When a device connects, in order to receive messages from the AWS IoT Core broker, it has to subscribe to the topics of interest, and the AWS IoT Device Gateway will ensure that the iot:Subscribe policy allows it. Once the device is connected the iot:Subscribe policy is not re-evaluated, which means that to remove the possibility for a device to receive messages, for example when a device is compromised and you need to quarantine the device, it can be done by denying iot:Receive.\n Subscribe to IoT Core You will need to Cloud9 environment for this lab. Access it here. Make sure you have finished Create a Cloud9 Environment. This link will open a new tab, please do remember to return to current page.\n If you are using your own laptop, please verify weather your network cannot access external 8883 port. Consider using a personal hotspot if it doesn\u0026rsquo;t work.\n  Git clone this repo, type the following code in Cloud9 terminal\ngit clone https://github.com/massi-ang/alexa-iot-workshop-lamp --depth=1 alexa-iot-workshop-lamp cd alexa-iot-workshop-lamp  Upload the connect_device_package.zip file you have downloaded previously to your laptop to the Cloud9 environment. Select the folder where the repo was cloned and do File-\u0026gt;Upload.\n Unzip the file. You will get the following things:\n A private key named \u0026lt;thing-name\u0026gt;.private.key A device certificate named \u0026lt;thing-name\u0026gt;.cert.pem some other stuff\u0026hellip;  Rename the private key to private.key and move it to the credentials folder.\n Rename the device certificate to cert.pem and move it to the credentials folder\n Open the config.js file and update the following configurations. Save\n iotEndpoint. You could find it in Iot console - settings  thingName. The name of created thing, likely smart-lamp-0001 deviceBindingUrl. It is the url where you deployed in the Device Binding UI. You\u0026rsquo;ll find it in the AWS Amplify Console. It is named Production branch URL   Install dependencies. Run npm install in the Cloud9 terminal\n Run node index.js to start the application.\n  The program listens to shadow information and send reported status to AWS IoT core. In real life, you would make sure that the device\u0026rsquo;s status has actually been changed before you send reported status. Here, since we don\u0026rsquo;t have hardware in this session, we simply report back as soon as we receive the delta.\nThe virtual lamp outputs a QRCode in the terminal and an URL with the same link that will be used to claim the device.\nTest Shadow In the step, we demo the on \u0026amp; off status of the device by maually sending changes to the topic below.\n Open the AWS IoT Console and select Test\n In the Subscribe field enter $aws/things/+/shadow/# (+ is a single level topic wildcard, # is a multilevel wildcard and can only appear at the end). Press Subscribe to topic\n In the publish topic field enter $aws/things/smart-lamp-0001/shadow/update\n In the message field enter the following text and press Publish\n{ \u0026#34;state\u0026#34;: { \u0026#34;desired\u0026#34;: { \u0026#34;powerState\u0026#34;: \u0026#34;ON\u0026#34; } } }  You should see the following outputs in the device simulator terminal:\nturn ON Smart Lamp  For more information upon shadow, please check using shadows\n"
},
{
	"uri": "/smart-home/3.bind-device.html",
	"title": "3. Claim the device",
	"tags": [],
	"description": "",
	"content": "In this step you are going to associate the virtual Smart Lamp to a customer account to create binding relationship between device and user.\n Use your Camera or Wechat Application to scan the QR Code that has been printed in the terminal window when you run the lamp simulator. NOTE: From a laptop you can click on the URL link that is shown in the terminal under the QR Code\n The browser will be redirected to a login page. The first time you\u0026rsquo;ll need to create an account. Use a valid email address for both username and email since you\u0026rsquo;ll receive a confirmation code.\n Sign In and you should be redirected to the Device Binding page\n Click the Claim button\n Refresh the page to check if the button\u0026rsquo;s status has changed to Unclaim\n Go to DynamoDB Console to check the item in table named Device-xxxxxxx. thingName is the name of thing you created, and the username is the username field in Cognito User Pool.\n  This is just one way to create relationship between devices and users. Alternatively you can store user information as an Attribute on the Thing, and leverage Fleet Indexing to quickly retrieve the devices belonging to a given user.\n "
},
{
	"uri": "/smart-home/4.create-skill.html",
	"title": "4. Create Smart Home Skill",
	"tags": [],
	"description": "",
	"content": "Using the Alexa Developer portal, we are going to configure the Smart Home Skill.\nAt the end of this step you\u0026rsquo;ll obtain the Skill Id that will be used to setup your skill logic in Lambda.\nIn order to successuflly run this workshop as-is you need to have an Alexa account registered in the US. If you are unsure about where your account has been registered to, we advice to create a new account.\n  In a web browser, go to the Alexa Skills Kit Developer Console. If not already authenticated, you may have to Sign In with your Amazon Developer Account. The account credentials are the same as for your Amazon account, and you\u0026rsquo;ll need to create one if you don\u0026rsquo;t have it already.\n Click the Create Skill button. If you do not see it select Alexa-\u0026gt;Alexa Skill Kit from the nav bar.\n For the Skill name, enter SmartLamp\n Leave the Default language as English (US)\n Under Choose a model to add to your skill select the Smart Home model\n Under Choose a method to host your skill\u0026rsquo;s backend resources select Provision your own\n Click the Create a skill button\n  When completed, you should be at the configuration page for a newly created SmartLamp page. In the Smart Home service endpoint section, locate the Your Skill ID value and click the Copy to clipboard link to copy and then paste it in a text file. The Skill Id will be used later. You do not have to configure any other things yet.\n"
},
{
	"uri": "/smart-home/6.account-linking.html",
	"title": "5. Setup Account Linking",
	"tags": [],
	"description": "",
	"content": " In this step you are going to setup Account Linking between your backend and Alexa. Account linking is required by Alexa when using Smart Home Skills in order to be able to identify the devices belonging to a given user.\nWhen you deployed the Companion App, a Congito User Pool was created in the AWS account to store the user identities. Cognito provides a managed IdP that developers can use to manage their users identities and link them with Amazon accounts without writing one line of code.\nFor more information about Amazon Cognito User Pool, please refer to the developer guide.\nWhat is Account Linking If you already know what Account Linking is, you can skip to Configure App Client OAuth 2.0 Settings\n In Claim the device you have associated the Smart Lamp to the customer account in your backend. When the same customer interact with Alexa via the Alexa App or an Echo device, the Alexa backend will identify him/her with the Amazon identity. On order for the commands to be directed to the right devices, Alexa has to map the Amazon identity of the customer to the customer identity in your backend.\nAccount Linking in the Alexa Skills Kit uses OAuth 2.0. The following diagram explains the flow of obtain an AccessToken from your OAuth2.0 system.\nAlexa will send all the directives to you backend together with an AccessToken. The backend should verify and decode the AccessToken to get user related information.\nConfigure Cognito User Pool Alexa has to connect to Cognito User Pool to verify the user identity during the Account Linking, and the next steps will configure the Cognito User Pool with a new OAuth 2.0 client for Alexa.\n Go to Cognito User Pool Console\n Select the user pool called awsalexaui...\n In the left navigatiaon bar, under General Settings, select App clients\n Click on Add another app client at the bottom of the list of clients\n Enter a new App client name (eg alexa) and click on Create app client\n On the left side navigation bar, under App integration, select App client settings\n Find the App Client you just created. It should be named alexa\n Under Enabled Identity Providers，select Cognito User Pool\n In Callback URL(s)，enter Redirect URLs copied from Alexa Developer Console, separated by a comma. In Alexa Developer Console, choose Account Linking, scroll down to the bottom, you should be able to find three Redirect URL. Alexa redirect to different url based on user\u0026rsquo;s region. To serve all the Alexa users, it is suggested to copy all the URLs.\n In Allowed OAuth Flows session，choose Authorization code grant\n In Allowed OAuth Scopes session，choose openid\n Click Save changes\n  Configure Cognito User Pool domain name In order for Alexa to be able to contact the User Pool you need to setup a public domain name. You can either use the default domain names available in Cognito which follow the pattern https://\u0026lt;your-domain-prefix\u0026gt;.auth.\u0026lt;region\u0026gt;.amazoncognito.com, or you can use your own domain name. To get more information please refer to Adding a Custom Domain to a User Pool。\nFor simplicity, let\u0026rsquo;s configure the default domain name:\n Go to Cognito User Pool Console\n On the left side bar, under App integration, choose Domain name\n Enter domain prefix and click Check availability, the domain name must be unique in the region\n If the message the domain is available appear you can press Save changes\n  Configure Account Linking in Alexa Developer Console Now that we have setup the Cognito User Pool to allow an OAuth2.0 client to connect we can complete the Account Linking setup in the Alexa Developer console.\n Go to Alexa Console\n In the Skills list，choose the previously created skill\n On the left side navigation bar，choose Account Linking\n Under Security Provider Information，choose Auth Code Grant\n Enter https://\u0026lt;your-cognito-domain\u0026gt;/oauth2/authorize in Authorization URI\n Enter https://\u0026lt;your-cognito-domain\u0026gt;/oauth2/token in Access Token URI\n Enter Client ID and Client Secret (click Show details to display it) that you can find in Cognito User Pool console, under App Clients section  Click Add scope and input openid. For Smart Home skill at least one scope should be specified which allows the retrieval of the user information.\n Change Authnetication scheme to Credentials in request body\n Click Save on the top right corner\n  For more about Cognito OAuth2.0 URI, please refer to Amazon Cognito User Pools Auth API Reference\nPerform Account Linking in Alexa App A Skill in development is only accessible by the same account that has been used to develop it. Ensure that you are using the right credentials when logging in the app.\n  Launch Alexa APP on mobile phone\n Click the button on the top left corner\n Choose Skills \u0026amp; Games, then click Your Skills\n Scroll the boxes left and click the Dev\n Your created Smart Home Skill SmartLamp should be listed below. Click it to continue.\n Click the Enable To Use button\n On the popup window, input your email and password, if have not registered yet, sign up one\n Account Link success   Do not try to Discover Devices now, it will not work! We have to create the Alexa Skill first which we will do next.\n Smart Home Skills require Account Linking to be enabled. As explained previously the directives that are sent from Alexa to your skill will contain a JWT encoded accessToken in the message body. Your backend should verify the authenticity of the token and decode it to obtain the user identity.\nReference Understand Account Linking\nThe OAuth2.0 Authorization Framework\nJSON Web Token\nAWS Cognito User Pool\n"
},
{
	"uri": "/smart-home/7.create-lambda.html",
	"title": "6. Create the Alexa backend",
	"tags": [],
	"description": "",
	"content": " It is now time to create the backend for your skill, ie the service that will receive the Alexa directives corresponding to the user interactions with Alexa. In order to create a robust solution without having to setup and maintain a lot of infrastructure you are going to use Lambda.\nMake sure you\u0026rsquo;ve selected the N.Virginia region before you continue.\nCreate Lambda Execution Role  Go to IAM Console, choose Roles on the left side bar\n click Create Role\n Under Choose the service that will use this role, choose Lambda\n Click Next: Permissions, Next: Tags, Next: Review\n In the Review page, enter alexa-lambda-role for the Role name, and choose Create role\n Click the alexa-lambda-role, under Permissions tab, click Add inline policy\n In Create Policy page, select JSON, and copy \u0026amp; paste the following policy. Please remember to replace \u0026lt;device-table-name\u0026gt;. Check your DynamoDB table name in DynamoDB Console.\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: [ \u0026#34;dynamodb:Query\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:dynamodb:*:*:table/\u0026lt;device-table-name\u0026gt;/index/ByUsernameThingName\u0026#34; ], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; }, { \u0026#34;Action\u0026#34;: [ \u0026#34;iot:UpdateThingShadow\u0026#34; ], \u0026#34;Resource\u0026#34;: [ \u0026#34;*\u0026#34; ], \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] } Click Review Policy\n In the Name field, input a name for this policy\n Click Create Policy\n Click Attach Policy\n Search for LambdaBasic. Select the checkbox on AWSLambdaBasicExecutionRole\n Click Attach policy\n  Create the Lambda function  Go to Lambda Console, click Create function\n Select Author from scratch, and enter the following information:\n Name: Provide a name for your Lambda function Runtime: To use the sample code provided in this topic, choose Node.js 10.x Role: under Perission, select Use an existing role and select the role you previously created   Click Create Function. Your function should be created and you will move to Configuration\n In the Configuration tab, expand the Designer section, and click on Add triggers\n Select the Alexa Smart Home trigger\n In the Configure triggers section, add the Skill ID from the developer console in the box specified.\n Leave Enable trigger checked. This enables the Amazon Alexa service to call your Lambda function.\n Click Add\n  Upload Code  Got to the Cloud9 instance and clone this repo,\ngit clone https://github.com/massi-ang/alexa-iot-smarthome alexa-iot-smarthome cd alexa-iot-smarthome cd src Edit src/config.json file. You find the necessary information in AWS Console and Alexa Console\n Run npm install --production to install dependencies\n While in the /src folder, make a zip file to include index.js, auth.js, config.json, alexa/ and node_modules/, these files/directories should be located at the root level of the zip file\nzip -r ../lambda.zip index.js auth.js config.json alexa/ node_modules/  Download the lambda.zip file to your laptop (right-click on the file name in the explorer pane)\n Go to AWS Lambda Console, click the lambda function\n Under Function code, click Upload to upload the zip file\n Click the Save button at the top right corner\n  Configure Alexa Skill Endpoint  From the Lambda console, copy the ARN of the Lambda Function in the top right corner\n Go to Alexa Developer Console, select the created Smart Home Skill\n Paste the Lambda ARN in Default endpoint and in the North America endpoint\n Click the Save button in top right corner\n  "
},
{
	"uri": "/smart-home/8.device-discovery.html",
	"title": "7. Discover Smart Home Devices",
	"tags": [],
	"description": "",
	"content": "There are a couple of ways to invoke Discover directive:\n ask \u0026ldquo;Alexa, discover my smart home devices\u0026rdquo; to Echo/Alexa App or AVS devices. use the mobile app  Let\u0026rsquo;s use the second:\n Open Alexa App\n Choose Devices, and then click add icon\n Choose Add Device\n Scroll to the bottom, and then choose Other\n Click Discover Devices. Wait for 20s, the discover process may take longer.\n Once finished, return to the Devices screen. Now, you are going to create a friendly name for the lamp.\n Choose All Devices, you should be able to see a device named Smart Lamp\n Select the device\n Click Edit Name, and enter a friendly name. Now you can control the device through voice. Example utterances are:\n Alexa, turn on the \u0026lt;device-friendly-name\u0026gt; Alexa, turn off the \u0026lt;device-friendly-name\u0026gt;   "
},
{
	"uri": "/smart-home/9a.test-skill.html",
	"title": "8. Test Smart Home Skill",
	"tags": [],
	"description": "",
	"content": " Now, you can try control the Smart Lamp power status using voice.\nChange ON/OFF status of smart lamp Make sure your Smart Lamp Simulator is running. You will see the output from its terminal.\n  Try to say Alexa, turn on \u0026lt;device-friendly-name\u0026gt; to Alexa App or Echo device.\n Try to say Alexa, turn off \u0026lt;device-friendly-name\u0026gt; to Alexa App or Echo device.\n Check your Smart Lamp Simulator output\n Go to Alexa Developer Console, select your Skill\n Click the Test tab, and try input turn on the    Challenge 1: Standard Smart Light device practice (Optional) Now the Smart Lamp is considered as an \u0026ldquo;Other\u0026rdquo; device in Alexa App. Modify the code so that the device can be recognized as a standard Alexa-Enabled Light. In this way the device will appear under the Light category un the Alexa app and it will be possible to control the device directly in the Alexa App.\nChallenge 2: Other devices (Optional) In this lab we have implemented a simulated lamp. You can try on your own to model a switch and then connect the switch to the lamp, so that when the switch is turned on the lamp is turned on.\n"
},
{
	"uri": "/advanced.html",
	"title": "A Real Device",
	"tags": [],
	"description": "",
	"content": " Chapter 4 Now that you know the basics on how to create Alexa Smart Home skills, and how to control simulated devices, let\u0026rsquo;s control a real device.\n"
},
{
	"uri": "/advanced/1.freertos-and-afr.html",
	"title": "1. FreeRTOS and Amazon FreeRTOS",
	"tags": [],
	"description": "",
	"content": " Programming MCUs When programming microcontrollers there are mainly 2 paradigms:\n the super-loop real-time operating system  Super-loop In the super-loop model, think Arduino, the program consist in an infinite loop that executes each step in a given sequence, evaluates the different branches in sequence, etc. Complex logix become easily unmanegeable in this model and it is not easy to prioritize certain operations compared to other.\nRTOS An RTOS doesn\u0026rsquo;t normally provides all the features or OSes like Linux or Windows. At is core an RTOS provides a mechanism to schedule tasks to be executed on the MCU in order to achieve a time bound execution time. Each task is assigned a priority and tasks with higher priority might be able to pre-empt tasks with lower prio.\nFreeRTOS FreeRTOS is an Open Source Real Time operating system with support for over 30 embedded system architectures, such as MIPS, ARM7, ARM Cortex-M3, Xtensa.\nThe OS itself has a small footprint of between 4K to 9Kbytes, is written in C and is highly portable.\nIt provides different schedulers to control the execution of the task and a broad range of inter-task communication mechanisms.\nIt also includes a low power mode for embedded application that have to run on battery.\nYou can find a summary of the FreeRTOS kernel fundamentals here.\nAmazon FreeRTOS Amazon FreeRTOS is open source and it extends the FreeRTOS kernel, the most popular real-time operating system for microcontrollers. With Amazon FreeRTOS, you can take advantage of the large ecosystem of existing tools developed for the FreeRTOS kernel. If you are already using the FreeRTOS kernel on your existing devices, you can choose to use Amazon FreeRTOS and take advantage of the functionality provided by the additional libraries, or continue to use just the kernel operating system.\nAmazon FreeRTOS includes software libraries that make it easy to program commonly needed IoT capabilities into your device, including libraries that help configure devices to a local network using common connectivity options like Wi-Fi or Ethernet, or connect to a mobile device using Bluetooth Low Energy. Amazon FreeRTOS also includes an over-the-air (OTA) update feature to remotely update devices with feature enhancements or security patches.\nWhat you will learn In this lab you will:\n Install and configure the ESP32 toolchain Compile and install a microcontroller firmware based on Amazon FreeRTOS Modify the firmware so that the ESP32 can respond to Alexa directives  "
},
{
	"uri": "/advanced/2.hw-kit.html",
	"title": "2. Hardware kit",
	"tags": [],
	"description": "",
	"content": " Assemble the kit The sample kit is composed by a ESP32-DevKitC board and a daughter board with:\n 4 buttons 5 RGB NeoPixels leds addressable over I2C (WS2812) a temperature / pressure /huimdity sensor luminosity sensor BME280 a luminosity sensor BH1730FVC  Insert the ESP32 board on the daughter board making sure the USB port is on the same side of the black connector on the daughter board.\n"
},
{
	"uri": "/advanced/3.install-tool-chain.html",
	"title": "3. Your first Amazon FreeRTOS project",
	"tags": [],
	"description": "",
	"content": " Getting started If you want to experiment with Amazon FreeRTOS on your own you can check the documentation.\nFor this lab, we are going to use a pre-configured example where we already have the code needed to interact with the peripherals on the daughter board.\nIn this lab we are going to follow the instructions of this project https://github.com/EponaLab/afr-alexa-smarthome.\nClick on the link and follow the README.\nStop at the step when you are asked to checkout the shadow-demo branch.\n Choose a Thing name different from what you used earlier\n "
},
{
	"uri": "/advanced/4.afr-lamp.html",
	"title": "4. Smart lamp",
	"tags": [],
	"description": "",
	"content": " Implement the lamp You should have now a working firmware that can make the ESP32 securely connect to AWS IoT Core, but it does not work as a connected lamp yet.\nYou need to implement the logic that allows the interaction with the backend: listening to Device Shadow changes and report the current status of the device to the shadow.\nFor simplicity the code has already been provided to you.\n In Cloud9 click in a Terminal window\n Checkout the alexa-lamp branch and make the project\ngit checkout alexa-lamp cd ~/environment/esp/afr-alexa-smarthome/demos/espressif/esp32_devkitc_esp_wrover_kit/make make  You should have gotten a new aws_demos.bin file inside the ~/environment/esp/afr-alexa-smarthome/demos/espressif/esp32_devkitc_esp_wrover_kit/make/build folder.\nDownload it to your local machine and flash it using esptool.py.\nesptool.py --chip esp32 --port /dev/tty.SLAB_USBtoUART --baud 921600 --before default_reset --after hard_reset write_flash -z --flash_mode dio --flash_freq 40m --flash_size detect 0x20000 aws_demos.bin Check everything works Open the AWS IoT Console and subscribe to the # topic.\nYou should start seeing messages appearing published on the $aws/things/smart-lamp-xxxx/shadow/update topic.\nIn case you do not see any messages appearing, you can try to reset the board with the button to the left of the USB cable.\n If you were still not seeing any message appearing, try to connect to the board via a serial monitor. The instruction can be found here\n "
},
{
	"uri": "/advanced/5.connecting.html",
	"title": "5. Enable Alexa",
	"tags": [],
	"description": "",
	"content": " The firmware you have built and installed on the device is enabled to communicate with AWS IoT and the Device Shadow serice.\nHow it works Check the file aws_publish_sensors_mqtt.c in ~/environment/esp/afr-alexa-smarthome/demos/espressif/esp32_devkitc_esp_wrover_kit/common/application_code.\nThe prvDeltaCallback function is invoked every time the client receives a delta message from the Shadow Service. It then parses the message and publishes the result on an internal queue.\nstatic BaseType_t prvDeltaCallback( void * pvUserData, const char * const pcThingName, const char * const pcDeltaDocument, uint32_t ulDocumentLength, MQTTBufferHandle_t xBuffer ) { ... LedStripState_t xLedStripState = {}; Message_t xMessage = {}; // Implement a simple ON/OFF lamp - reads the value stored in the powerState field bool state = prvSetLedsFromState(pxJsonPowerState, \u0026amp;xLedStripState); xMessage.xMessageType = LAMP_DATA; strcpy(xMessage.xMessageContent.sLampMessage, (state ? \u0026quot;ON\u0026quot; : \u0026quot;OFF\u0026quot;)); ( void ) xQueueSend( prvSensorsDataQueueHandle, \u0026amp;xMessage, portMAX_DELAY ); json_value_free( xJsonDoc ); SHADOW_ReturnMQTTBuffer( xShadowHandle, xBuffer ); return pdTRUE; }  The queue is then read in the task prvMQTTConnectAndPublishTask which, in function of the type of the message published, will create different responses to be published to the Device Shadow.\nstatic void prvMQTTConnectAndPublishTask( void * pvParameters ) { .... /* MQTT client is now connected to a broker. Wait for messages and publish them. */ for( ; ; ) { /* We wait for the message indefinitely, so we don't need to check for the return code */ ( void ) xQueueReceive( prvSensorsDataQueueHandle, \u0026amp;xMessage, portMAX_DELAY ); switch( xMessage.xMessageType ) { case BUTTONS_DATA: configPRINTF( ( \u0026quot;Get the button data: n: %d, s: %d \\r\\n\u0026quot;, xMessage.xMessageContent.xButtonMessage.xButtonNumber, xMessage.xMessageContent.xButtonMessage.xButtonState ) ); ( void ) snprintf( cDataBuffer, echoMAX_DATA_LENGTH, pcButtonUpdateTemplate, xMessage.xMessageContent.xButtonMessage.xButtonNumber + 1, xMessage.xMessageContent.xButtonMessage.xButtonState, ( int ) xMQTTMessageNumber ); break; case SENSORS_DATA: configPRINTF( ( \u0026quot;Get the sensors data: t: %d, p: %u, h: %u, i: %f \\r\\n\u0026quot;, xMessage.xMessageContent.xSensorsMessage.lTemperature, xMessage.xMessageContent.xSensorsMessage.ulPressure, xMessage.xMessageContent.xSensorsMessage.lHumidity, xMessage.xMessageContent.xSensorsMessage.fIlluminance ) ); /* Create the message that will be published, which is of the form \u0026quot;Hello World n\u0026quot; * where n is a monotonically increasing number. Note that snprintf appends * terminating null character to the cDataBuffer. */ ( void ) snprintf( cDataBuffer, echoMAX_DATA_LENGTH, pcSensorsUpdateTemplate, xMessage.xMessageContent.xSensorsMessage.lTemperature / 100., ( double ) xMessage.xMessageContent.xSensorsMessage.ulPressure, ( double ) xMessage.xMessageContent.xSensorsMessage.lHumidity, xMessage.xMessageContent.xSensorsMessage.fIlluminance, ( int ) xMQTTMessageNumber ); break; case LED_DATA: pxLedState = xMessage.xMessageContent.xLedMessage.xState; ( void ) snprintf( cDataBuffer, echoMAX_DATA_LENGTH, pcLEDUpdateTemplate, pxLedState[0].ucRed, pxLedState[0].ucGreen, pxLedState[0].ucBlue, pxLedState[1].ucRed, pxLedState[1].ucGreen, pxLedState[1].ucBlue, pxLedState[2].ucRed, pxLedState[2].ucGreen, pxLedState[2].ucBlue, pxLedState[3].ucRed, pxLedState[3].ucGreen, pxLedState[3].ucBlue, pxLedState[4].ucRed, pxLedState[4].ucGreen, pxLedState[4].ucBlue, ( int ) xMQTTMessageNumber ); break; case LAMP_DATA: ( void ) snprintf( cDataBuffer, echoMAX_DATA_LENGTH, pcLampUpdateTemplate, xMessage.xMessageContent.sLampMessage, ( int ) xMQTTMessageNumber ); break; default: break; } /* Fill the common update parameters */ xUpdateParam.pcThingName = clientcredentialIOT_THING_NAME; xUpdateParam.xQoS = eMQTTQoS0; xUpdateParam.pcData = cDataBuffer; xUpdateParam.ucKeepSubscriptions = pdTRUE; xUpdateParam.ulDataLength = ( uint32_t ) strlen( cDataBuffer ); /* Publish the message */ configPRINTF( ( \u0026quot;%s \\r\\n\u0026quot;, cDataBuffer ) ); xReturned = SHADOW_Update( xShadowHandle, \u0026amp;xUpdateParam, MQTT_TIMEOUT * 3 ); if( xReturned == eShadowSuccess ) { configPRINTF( ( \u0026quot;Successfully performed update.\\r\\n\u0026quot; ) ); } else { configPRINTF( ( \u0026quot;Update failed, returned %d.\\r\\n\u0026quot;, xReturned ) ); } xMQTTMessageNumber += 1; } /* Disconnect the client. */ ( void ) SHADOW_ClientDisconnect( xShadowHandle ); } ... }  Connecting it to Alexa In order to be able to control the device via Alexa you have to claim it to your account and then ask Alexa to Discover it. Same as you already did for the virtual device.\nOnce you have discovered the device, you are able to control it via vocal commands in the Alexa App.\nIf you had figured out how to change the Discovery response to display the device as a Lamp, you should also be able to control its operation via the App UI.\nChallenge This code only turn on or off all the leds in white. Can you change the implementation to be also be able to control the color and the intensity? A DIY color changing light-bulb!\n"
},
{
	"uri": "/cleanup.html",
	"title": "Conclusion",
	"tags": [],
	"description": "",
	"content": " Chapter 5 You made it to the end. Time to clean up.\n"
},
{
	"uri": "/cleanup/destroy-resource.html",
	"title": "Conclusion &amp; Destroy AWS Resources",
	"tags": [],
	"description": "",
	"content": " Congratulations! Now you have concluded this workshop about How to build a Smart home Skill.\nFor destroying resources, please check the below.\nDestroy Device Binding UI  Go to Cognito User Pool Console\n Select the User Pool created\n Click Domain name on the left side bar\n Click Delete domain, select the checkbox and confirm to delete\n Go to AWS Amplify Console\n Select the Amplify APP\n Select Actions in the top right corner and click delete app  Go to CloudFormation Console\n Select the CloudFormation stack without NESTED tag, please make sure you have selected the right CloudFormation stack  Click Delete\n If you have the following error while delete the CloudFormation template, select the template and delete again, on the popup window, do NOT select resource   Destroy Lambda \u0026amp; Lambda Execution Role  Go to Lambda Console\n Tick the radio box before the lambda function\n Click Actions, and then select Delete\n Go to AWS IAM Console, click Roles on the left side bar\n Search for the lambda execution role and delete\n  "
},
{
	"uri": "/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]